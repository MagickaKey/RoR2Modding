VagrantBody

> transform = p:(41.8, -155.6, 47.3) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)

> UnityEngine.Networking.NetworkIdentity
>v clientAuthorityCallback = 

> RoR2.CharacterBody
>v bodyIndex = 65
>v baseNameToken = VAGRANT_BODY_NAME
>v subtitleNameToken = VAGRANT_BODY_SUBTITLE
>v pendingTonicAfflictionCount = 0
>v bodyFlags = None
>v readOnlyInstancesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.CharacterBody]
>v rootMotionInMainState = False
>v mainRootSpeed = 0
>v baseMaxHealth = 2100
>v baseRegen = 0
>v baseMaxShield = 0
>v baseMoveSpeed = 6
>v baseAcceleration = 15
>v baseJumpPower = 0
>v baseDamage = 6.5
>v baseAttackSpeed = 1
>v baseCrit = 0
>v baseArmor = 15
>v baseJumpCount = 0
>v autoCalculateLevelStats = True
>v levelMaxHealth = 630
>v levelRegen = 0
>v levelMaxShield = 0
>v levelMoveSpeed = 0
>v levelJumpPower = 0
>v levelDamage = 1.3
>v levelAttackSpeed = 0
>v levelCrit = 0
>v levelArmor = 0
>v killCount = 0
>v wasLucky = False
>v spreadBloomDecayTime = 0.45
>v spreadBloomCurve = UnityEngine.AnimationCurve
>v crosshairPrefab = StandardCrosshair (UnityEngine.GameObject)
>v hideCrosshair = False
>v aimOriginTransform = AimCenter (UnityEngine.Transform)
>v hullClassification = BeetleQueen
>v portraitIcon = VagrantBody (UnityEngine.Texture2D)
>v isChampion = True
>v currentVehicle = 
>v preferredPodPrefab = 

> RoR2.HealthComponent
>v health = 3000
>v shield = 0
>v barrier = 0
>v body = 
>v dontShowHealthbar = False
>v globalDeathEventChanceCoefficient = 1
>v medkitActivationDelay = 1.1
>v frozenExecuteThreshold = 0.3

> RoR2.InputBankTest
>v lookPitch = 0
>v lookYaw = 0
>v moveVector = (0.0, 0.0, 0.0)
>v skill1 = RoR2.InputBankTest+ButtonState
>v skill2 = RoR2.InputBankTest+ButtonState
>v skill3 = RoR2.InputBankTest+ButtonState
>v skill4 = RoR2.InputBankTest+ButtonState
>v interact = RoR2.InputBankTest+ButtonState
>v jump = RoR2.InputBankTest+ButtonState
>v sprint = RoR2.InputBankTest+ButtonState
>v activateEquipment = RoR2.InputBankTest+ButtonState
>v ping = RoR2.InputBankTest+ButtonState
>v emoteRequest = -1

> RoR2.CameraTargetParams
>v cameraParams = ccpVagrant (RoR2.CharacterCameraParams)
>v cameraPivotTransform = 
>v aimMode = Standard
>v recoil = (0.0, 0.0)
>v idealLocalCameraPos = (0.0, 2.0, -6.0)
>v fovOverride = -1
>v dontRaycastToPivot = False

> RoR2.Networking.CharacterNetworkTransform
>v positionTransmitInterval = 0.1
>v lastPositionTransmitTime = -Infinity
>v interpolationFactor = 2
>v newestNetSnapshot = RoR2.Networking.CharacterNetworkTransform+Snapshot
>v debugDuplicatePositions = False
>v debugSnapshotReceived = False

> RoR2.RigidbodyDirection
>v aimDirection = (1.0, 1.0, 1.0)
>v rigid = VagrantBody (UnityEngine.Rigidbody)
>v angularVelocityPID = VagrantBody (QuaternionPID)
>v torquePID = VagrantBody (VectorPID)
>v freezeXRotation = True
>v freezeYRotation = False
>v freezeZRotation = True
>v animatorXCycle = 
>v animatorYCycle = 
>v animatorZCycle = 
>v animatorTorqueScale = 0

> RoR2.RigidbodyMotor
>v moveVector = (0.0, 0.0, 0.0)
>v rigid = VagrantBody (UnityEngine.Rigidbody)
>v forcePID = VagrantBody (VectorPID)
>v centerOfMassOffset = (0.0, 0.0, 0.0)
>v animatorForward = 
>v animatorRight = 
>v animatorUp = 
>v enableOverrideMoveVectorInLocalSpace = False
>v canTakeImpactDamage = True
>v overrideMoveVectorInLocalSpace = (0.0, 0.0, 0.0)

> QuaternionPID
>v customName = Angular Velocity PID
>v PID = (2.0, 0.0, 0.0)
>v inputQuat = (0.0, 0.0, 0.0, 1.0)
>v targetQuat = (0.0, 0.0, 0.0, 1.0)
>v outputVector = (0.0, 0.0, 0.0)
>v gain = 1

> VectorPID
>v customName = torquePID
>v PID = (2.0, 0.0, 0.0)
>v inputVector = (0.0, 0.0, 0.0)
>v targetVector = (0.0, 0.0, 0.0)
>v outputVector = (0.0, 0.0, 0.0)
>v isAngle = True
>v gain = 1

> VectorPID
>v customName = Force PID
>v PID = (3.0, 0.0, 0.0)
>v inputVector = (0.0, 0.0, 0.0)
>v targetVector = (0.0, 0.0, 0.0)
>v outputVector = (0.0, 0.0, 0.0)
>v isAngle = False
>v gain = 1

> RoR2.TeamComponent
>v hideAllyCardDisplay = False

> RoR2.EntityStateMachine
>v customName = Body
>v initialStateType = EntityStates.SerializableEntityStateType
>v mainStateType = EntityStates.SerializableEntityStateType
>v commonComponents = RoR2.EntityStateMachine+CommonComponentCache
>v networkIndex = -1

> RoR2.EntityStateMachine
>v customName = Weapon
>v initialStateType = EntityStates.SerializableEntityStateType
>v mainStateType = EntityStates.SerializableEntityStateType
>v commonComponents = RoR2.EntityStateMachine+CommonComponentCache
>v networkIndex = -1

> RoR2.SkillLocator
>v primary = VagrantBody (RoR2.GenericSkill)
>v secondary = VagrantBody (RoR2.GenericSkill)
>v utility = 
>v special = VagrantBody (RoR2.GenericSkill)
>v passiveSkill = RoR2.SkillLocator+PassiveSkill

> RoR2.GenericSkill
>v skillName = JellyBarrage
>v skillNameToken = 
>v skillDescriptionToken = 
>v baseRechargeInterval = 10
>v baseMaxStock = 1
>v rechargeStock = 1
>v isBullets = False
>v shootDelay = 0.3
>v beginSkillCooldownOnSkillEnd = False
>v stateMachine = VagrantBody (RoR2.EntityStateMachine)
>v activationState = EntityStates.SerializableEntityStateType
>v interruptPriority = Skill
>v isCombatSkill = True
>v noSprint = True
>v canceledFromSprinting = False
>v mustKeyPress = False
>v icon = 
>v requiredStock = 1
>v stockToConsume = 1
>v hasExecutedSuccessfully = False

> RoR2.GenericSkill
>v skillName = TrackingBomb
>v skillNameToken = 
>v skillDescriptionToken = 
>v baseRechargeInterval = 12
>v baseMaxStock = 1
>v rechargeStock = 1
>v isBullets = False
>v shootDelay = 0.3
>v beginSkillCooldownOnSkillEnd = False
>v stateMachine = VagrantBody (RoR2.EntityStateMachine)
>v activationState = EntityStates.SerializableEntityStateType
>v interruptPriority = Skill
>v isCombatSkill = True
>v noSprint = True
>v canceledFromSprinting = False
>v mustKeyPress = False
>v icon = 
>v requiredStock = 1
>v stockToConsume = 1
>v hasExecutedSuccessfully = False

> RoR2.GenericSkill
>v skillName = ChargeMegaNova
>v skillNameToken = 
>v skillDescriptionToken = 
>v baseRechargeInterval = 15
>v baseMaxStock = 1
>v rechargeStock = 1
>v isBullets = False
>v shootDelay = 0.3
>v beginSkillCooldownOnSkillEnd = False
>v stateMachine = VagrantBody (RoR2.EntityStateMachine)
>v activationState = EntityStates.SerializableEntityStateType
>v interruptPriority = Skill
>v isCombatSkill = True
>v noSprint = True
>v canceledFromSprinting = False
>v mustKeyPress = False
>v icon = 
>v requiredStock = 1
>v stockToConsume = 1
>v hasExecutedSuccessfully = False

> UnityEngine.Rigidbody

> RoR2.ModelLocator
>v modelTransform = mdlVagrant (UnityEngine.Transform)
>v modelBaseTransform = Model Base (UnityEngine.Transform)
>v dontReleaseModelOnDeath = False
>v autoUpdateModelTransform = True
>v dontDetatchFromParent = True
>v noCorpse = False
>v normalizeToFloor = False
>v preserveModel = False

> RoR2.NetworkStateMachine

> RoR2.CharacterDeathBehavior
>v deathStateMachine = VagrantBody (RoR2.EntityStateMachine)
>v deathState = EntityStates.SerializableEntityStateType
>v idleStateMachine = RoR2.EntityStateMachine[]

> RoR2.DeathRewards
>v expReward = 0
>v logUnlockableName = Logs.VagrantBody.0
>v bossPickup = RoR2.SerializablePickupIndex

> RoR2.EquipmentSlot
>v equipmentActivateString = Play_UI_equipment_activate

> RoR2.SfxLocator
>v deathSound = Play_vagrant_death
>v barkSound = Play_vagrant_idle_VO
>v openSound = 
>v landingSound = 
>v fallDamageSound = 

> AkGameObj
>v isEnvironmentAware = True
>v m_positionOffsetData = AkGameObjPositionOffsetData

> AkEvent
>v actionOnEventType = AkActionOnEventType_Stop
>v curveInterpolation = AkCurveInterpolation_Linear
>v enableActionOnEvent = False
>v data = Play_vagrant_idle_loop
>v m_callbackData = 
>v playingId = 0
>v soundEmitterObject = 
>v transitionDuration = 0
>v triggerList = System.Collections.Generic.List`1[System.Int32]
>v useOtherObject = False

> AkEvent
>v actionOnEventType = AkActionOnEventType_Stop
>v curveInterpolation = AkCurveInterpolation_Linear
>v enableActionOnEvent = False
>v data = Stop_vagrant_idle_loop
>v m_callbackData = 
>v playingId = 0
>v soundEmitterObject = 
>v transitionDuration = 0
>v triggerList = System.Collections.Generic.List`1[System.Int32]
>v useOtherObject = False

> UnityEngine.CapsuleCollider
>c Model Base

>> transform = p:(0.0, 3.7, 0.0) r:(0.0, 0.0, 0.0) s:(4.0, 4.0, 4.0)
>>c mdlVagrant

>>> transform = p:(0.0, 0.0, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)

>>> UnityEngine.Animator

>>> RoR2.HurtBoxGroup
>>>v hurtBoxes = RoR2.HurtBox[]
>>>v mainHurtBox = HullHurtbox (RoR2.HurtBox)
>>>v bullseyeCount = 1

>>> ChildLocator

>>> RoR2.CharacterModel
>>>v body = VagrantBody (RoR2.CharacterBody)
>>>v itemDisplayRuleSet = idrsVagrant (RoR2.ItemDisplayRuleSet)
>>>v autoPopulateLightInfos = True
>>>v autoPopulateParticleSystemInfos = True
>>>v baseParticleSystemInfos = RoR2.CharacterModel+ParticleSystemInfo[]
>>>v baseRendererInfos = RoR2.CharacterModel+RendererInfo[]
>>>v baseLightInfos = RoR2.CharacterModel+LightInfo[]
>>>v invisibilityCount = 0
>>>v temporaryOverlays = System.Collections.Generic.List`1[RoR2.TemporaryOverlay]
>>>v revealedMaterial = matRevealedEffect (UnityEngine.Material)
>>>v cloakedMaterial = matCloakedEffect (UnityEngine.Material)
>>>v ghostMaterial = matGhostEffect (UnityEngine.Material)
>>>v bellBuffMaterial = matBellBuff (UnityEngine.Material)
>>>v wolfhatMaterial = matWolfhatOverlay (UnityEngine.Material)
>>>v energyShieldMaterial = matEnergyShield (UnityEngine.Material)
>>>v fullCritMaterial = matFullCrit (UnityEngine.Material)
>>>v beetleJuiceMaterial = matBeetleJuice (UnityEngine.Material)
>>>v brittleMaterial = matBrittle (UnityEngine.Material)
>>>v clayGooMaterial = matClayGooDebuff (UnityEngine.Material)
>>>v slow80Material = matSlow80Debuff (UnityEngine.Material)
>>>v immuneMaterial = matImmune (UnityEngine.Material)
>>>v elitePoisonOverlayMaterial = matElitePoisonOverlay (UnityEngine.Material)
>>>v elitePoisonParticleReplacementMaterial = matElitePoisonParticleReplacement (UnityEngine.Material)
>>>v weakMaterial = matWeakOverlay (UnityEngine.Material)

>>> RoR2.PrintController
>>>v printTime = 2
>>>v printCurve = UnityEngine.AnimationCurve
>>>v startingPrintHeight = 15
>>>v maxPrintHeight = 15
>>>v startingPrintBias = 0
>>>v maxPrintBias = 0
>>>v animateFlowmapPower = False
>>>v startingFlowmapPower = 0
>>>v maxFlowmapPower = 0
>>>v disableWhenFinished = True
>>>v paused = False
>>>v age = 0

>>> RoR2.Mecanim.CrouchMecanim
>>>v duckHeight = 15
>>>v animator = mdlVagrant (UnityEngine.Animator)
>>>v smoothdamp = 0.5
>>>v initialVerticalOffset = 0
>>>v crouchOriginOverride = CrouchOriginOverride (UnityEngine.Transform)
>>>c NovaCenter

>>>> transform = p:(0.0, 0.0, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>c VagrantArmature

>>>> transform = p:(0.0, 0.0, 0.0) r:(270.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>>c DetatchedHull

>>>>> transform = p:(0.0, 0.0, -0.7) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>>>c Hull.003

>>>>>> transform = p:(0.0, 0.5, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>>>>c HullHurtbox

>>>>>>> transform = p:(0.0, 0.4, 0.0) r:(358.9, 0.0, 359.9) s:(2.1, 1.8, 2.1)

>>>>>>> UnityEngine.SphereCollider

>>>>>>> RoR2.HurtBox
>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>v isBullseye = True
>>>>>>>v damageModifier = Normal
>>>>>>>v teamIndex = None
>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>v indexInGroup = 0
>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>> SurfaceDefProvider
>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>c Hull.002

>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>>>>>c Hull.004

>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>>>>>>c Hull.004_end

>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>>>>>>c HealthBarOrigin

>>>>>>>>> transform = p:(0.0, 1.0, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>>>>c StandableSurfacePosition

>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>>>>>c StandableSurface

>>>>>>>> transform = p:(0.0, 0.0, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)

>>>>>>>> UnityEngine.SphereCollider

>>>>>>>> UnityEngine.Rigidbody

>>>>>>>> KinematicCharacterController.PhysicsMover
>>>>>>>>v Rigidbody = StandableSurface (UnityEngine.Rigidbody)
>>>>>>>>v MoverController = StandableSurface (KinematicCharacterController.BasicPhysicsMoverController)

>>>>>>>> KinematicCharacterController.BasicPhysicsMoverController
>>>>>>>>v referenceTransformPosition = StandableSurfacePosition (UnityEngine.Transform)

>>>>>>>> RoR2.DisableCollisionsBetweenColliders
>>>>>>>>v collidersA = UnityEngine.Collider[]
>>>>>>>>v collidersB = UnityEngine.Collider[]
>>>>>c MajorFrill.001

>>>>>> transform = p:(0.0, 0.6, 1.2) r:(0.0, 90.0, 90.0) s:(1.0, 1.0, 1.0)
>>>>>>c MajorFrill.001_end

>>>>>>> transform = p:(0.0, 0.4, 0.0) r:(0.0, 90.0, 90.0) s:(1.0, 1.0, 1.0)
>>>>>c MajorFrill.002

>>>>>> transform = p:(1.0, 0.6, -0.6) r:(0.0, 210.0, 90.0) s:(1.0, 1.0, 1.0)
>>>>>>c MajorFrill.002_end

>>>>>>> transform = p:(0.0, 0.4, 0.0) r:(0.0, 210.0, 90.0) s:(1.0, 1.0, 1.0)
>>>>>c MajorFrill.003

>>>>>> transform = p:(-1.0, 0.6, -0.6) r:(0.0, 330.0, 90.0) s:(1.0, 1.0, 1.0)
>>>>>>c MajorFrill.003_end

>>>>>>> transform = p:(0.0, 0.4, 0.0) r:(0.0, 330.0, 90.0) s:(1.0, 1.0, 1.0)
>>>>>c Tentacle1.001

>>>>>> transform = p:(-0.5, 0.4, 0.3) r:(356.2, 299.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>> UnityEngine.CapsuleCollider

>>>>>> RoR2.HurtBox
>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>v isBullseye = False
>>>>>>v damageModifier = Normal
>>>>>>v teamIndex = None
>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>v indexInGroup = 1
>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>> SurfaceDefProvider
>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>c Tentacle1.005

>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 299.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>> UnityEngine.CapsuleCollider

>>>>>>> RoR2.HurtBox
>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>v isBullseye = False
>>>>>>>v damageModifier = Normal
>>>>>>>v teamIndex = None
>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>v indexInGroup = 2
>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>> SurfaceDefProvider
>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>c Tentacle1.003

>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 299.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>> RoR2.HurtBox
>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>v isBullseye = False
>>>>>>>>v damageModifier = Normal
>>>>>>>>v teamIndex = None
>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>v indexInGroup = 3
>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>> SurfaceDefProvider
>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>c Tentacle1.007

>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 299.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>> RoR2.HurtBox
>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>v isBullseye = False
>>>>>>>>>v damageModifier = Normal
>>>>>>>>>v teamIndex = None
>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>v indexInGroup = 4
>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>> SurfaceDefProvider
>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>c Tentacle1.002

>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 299.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>v isBullseye = False
>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>v teamIndex = None
>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>v indexInGroup = 5
>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>c Tentacle1.006

>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 299.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>v indexInGroup = 6
>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>>c Tentacle1.004

>>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 299.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>>v indexInGroup = 7
>>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>>>c Tentacle1.008

>>>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 299.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>>>v indexInGroup = 8
>>>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>>>>c Tentacle1.008_end

>>>>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 299.4, 180.0) s:(1.0, 1.0, 1.0)
>>>>>c Tentacle2.001

>>>>>> transform = p:(0.5, 0.4, 0.3) r:(356.1, 59.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>> UnityEngine.CapsuleCollider

>>>>>> RoR2.HurtBox
>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>v isBullseye = False
>>>>>>v damageModifier = Normal
>>>>>>v teamIndex = None
>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>v indexInGroup = 9
>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>> SurfaceDefProvider
>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>c Tentacle2.005

>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.1, 59.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>> UnityEngine.CapsuleCollider

>>>>>>> RoR2.HurtBox
>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>v isBullseye = False
>>>>>>>v damageModifier = Normal
>>>>>>>v teamIndex = None
>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>v indexInGroup = 10
>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>> SurfaceDefProvider
>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>c Tentacle2.003

>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.1, 59.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>> RoR2.HurtBox
>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>v isBullseye = False
>>>>>>>>v damageModifier = Normal
>>>>>>>>v teamIndex = None
>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>v indexInGroup = 11
>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>> SurfaceDefProvider
>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>c Tentacle2.007

>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.1, 59.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>> RoR2.HurtBox
>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>v isBullseye = False
>>>>>>>>>v damageModifier = Normal
>>>>>>>>>v teamIndex = None
>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>v indexInGroup = 12
>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>> SurfaceDefProvider
>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>c Tentacle2.002

>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.1, 59.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>v isBullseye = False
>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>v teamIndex = None
>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>v indexInGroup = 13
>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>c Tentacle2.006

>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.1, 59.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>v indexInGroup = 14
>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>>c Tentacle2.004

>>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.1, 59.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>>v indexInGroup = 15
>>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>>>c Tentacle2.008

>>>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.1, 59.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>>>v indexInGroup = 16
>>>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>>>>c Tentacle2.008_end

>>>>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.1, 59.4, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>>>>v indexInGroup = 17
>>>>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>c Tentacle3.001

>>>>>> transform = p:(0.0, 0.4, -0.6) r:(356.2, 180.0, 180.0) s:(1.0, 1.0, 1.0)

>>>>>> UnityEngine.CapsuleCollider

>>>>>> RoR2.HurtBox
>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>v isBullseye = False
>>>>>>v damageModifier = Normal
>>>>>>v teamIndex = None
>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>v indexInGroup = 18
>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>> SurfaceDefProvider
>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>c Tentacle3.005

>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 180.0, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>> UnityEngine.CapsuleCollider

>>>>>>> RoR2.HurtBox
>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>v isBullseye = False
>>>>>>>v damageModifier = Normal
>>>>>>>v teamIndex = None
>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>v indexInGroup = 19
>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>> SurfaceDefProvider
>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>c Tentacle3.003

>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 180.0, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>> RoR2.HurtBox
>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>v isBullseye = False
>>>>>>>>v damageModifier = Normal
>>>>>>>>v teamIndex = None
>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>v indexInGroup = 20
>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>> SurfaceDefProvider
>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>c Tentacle3.007

>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 180.0, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>> RoR2.HurtBox
>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>v isBullseye = False
>>>>>>>>>v damageModifier = Normal
>>>>>>>>>v teamIndex = None
>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>v indexInGroup = 21
>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>> SurfaceDefProvider
>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>c Tentacle3.002

>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 180.0, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>v isBullseye = False
>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>v teamIndex = None
>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>v indexInGroup = 22
>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>c Tentacle3.006

>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 180.0, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>v indexInGroup = 23
>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>>c Tentacle3.004

>>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 180.0, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>>v indexInGroup = 24
>>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>>>c Tentacle3.008

>>>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 180.0, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>>>v indexInGroup = 25
>>>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>>>>>>>>>>>c Tentacle3.008_end

>>>>>>>>>>>>>> transform = p:(0.0, 0.5, 0.0) r:(356.2, 180.0, 180.0) s:(1.0, 1.0, 1.0)

>>>>>>>>>>>>>> UnityEngine.CapsuleCollider

>>>>>>>>>>>>>> RoR2.HurtBox
>>>>>>>>>>>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>>>>>>>>>>>v isBullseye = False
>>>>>>>>>>>>>>v damageModifier = Normal
>>>>>>>>>>>>>>v teamIndex = None
>>>>>>>>>>>>>>v hurtBoxGroup = mdlVagrant (RoR2.HurtBoxGroup)
>>>>>>>>>>>>>>v indexInGroup = 26
>>>>>>>>>>>>>>v readOnlyBullseyesList = System.Collections.ObjectModel.ReadOnlyCollection`1[RoR2.HurtBox]

>>>>>>>>>>>>>> SurfaceDefProvider
>>>>>>>>>>>>>>v surfaceDef = sdVagrant (SurfaceDef)
>>>c BaseEffects

>>>> transform = p:(0.0, 0.0, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>>c LightningParticles, Small

>>>>> transform = p:(0.0, 0.2, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)

>>>>> UnityEngine.ParticleSystem

>>>>> UnityEngine.ParticleSystemRenderer
>>>>c Point light

>>>>> transform = p:(0.0, 0.8, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)

>>>>> UnityEngine.Light

>>>>> RoR2.FlickerLight
>>>>>v light = Point light (UnityEngine.Light)
>>>>>v sinWaves = Wave[]
>>>c VagrantMesh

>>>> transform = p:(0.0, -0.7, 0.0) r:(270.0, 240.0, 0.0) s:(1.0, 1.0, 1.0)

>>>> UnityEngine.SkinnedMeshRenderer
>>>c VagrantSkirtMesh

>>>> transform = p:(0.0, -0.7, 0.0) r:(270.0, 240.0, 0.0) s:(1.0, 1.0, 1.0)

>>>> UnityEngine.SkinnedMeshRenderer
>>>c Spinner

>>>> transform = p:(0.0, 0.0, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)

>>>> Rewired.ComponentControls.Effects.RotateAroundAxis
>>>>c MissileLaunchCenter

>>>>> transform = p:(2.3, 0.0, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>c TrackingBombCenter

>>>> transform = p:(0.0, -1.5, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>c SpawnOrigin

>>>> transform = p:(0.0, 3.6, 0.0) r:(270.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
>>>c CrouchOriginOverride

>>>> transform = p:(0.0, -0.7, 0.0) r:(0.0, 180.0, 180.0) s:(1.0, 1.0, 1.0)
>>>c AimAssist

>>>> transform = p:(0.0, 0.0, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)

>>>> RoR2.AimAssistTarget
>>>>v point0 = Hull.004 (UnityEngine.Transform)
>>>>v point1 = DetatchedHull (UnityEngine.Transform)
>>>>v assistScale = 2.9
>>>>v healthComponent = VagrantBody (RoR2.HealthComponent)
>>>>v teamComponent = VagrantBody (RoR2.TeamComponent)
>>>>v instancesList = System.Collections.Generic.List`1[RoR2.AimAssistTarget]
>>>>v debugAimAssistVisualCoefficient = RoR2.ConVar.FloatConVar
>>c AimCenter

>>> transform = p:(0.0, 0.0, 0.0) r:(0.0, 0.0, 0.0) s:(1.0, 1.0, 1.0)
